package shazam.hash;

import java.util.ArrayList;

/**
 * Created by Wen Ke on 2016/10/20.
 * Generating a constellation map for each audio.
 */
public class CombineHash {

    // What a terrible mistake !
    // dividing an int by an INT ?! Naive!
    public static final double scaling = FFT.WINDOW_SIZE / 44100.0;

    public static final int interval_num = 5;

    public static final int start_freq = 110; // The frequency of tone A1

    private static final int[][] freqRanges = new int[interval_num][2];

    static {
        for (int i = 0; i < interval_num; ++i) {
            freqRanges[i][0] = (int) Math.round((start_freq << i) * scaling);
            freqRanges[i][1] = (int) Math.round((start_freq << (i + 1)) * scaling);
        }
    }

    /**
     * The strongest frequencies for each frame
     */
    private ArrayList<int[]> strong_freqs = new ArrayList<>();
    private int id;

    /**
     * For songs about to add into DB
     * @param id
     */
    public CombineHash(int id) {
        this.id = id;
    }

    /**
     * For songs about to be searched
     */
    public CombineHash() {
        this.id = -1;
    }

    /**
     * Append a column of frequency peaks to the list of strongest freqs.
     * A frequency peak is a frequency value whose amplitude is the highest among
     * all frequencies in a frequency interval.
     *
     * @param freqDomain The frequency domain strong_freqs generated by FFT.
     */
    public void append(double[] freqDomain) {
        int[] freqPeaks = new int[interval_num];

        // The maximum amplitude and its frequency
        double max;
        int max_freq;

        // find the peak frequency in each interval
        for (int i = 0; i < interval_num; ++i) {
            max = 0;
            max_freq = freqRanges[i][0];
            for (int j = freqRanges[i][0]; j < freqRanges[i][1]; ++j) {
                if (freqDomain[j] > max) {
                    max = freqDomain[j];
                    max_freq = j;
                }
            }
            freqPeaks[i] = max_freq;
        }
        strong_freqs.add(freqPeaks);
    }

    /**
     * Cross hashing.
     */
    public ArrayList<ShazamHash> shazamHash() {
        if (strong_freqs.size() < 3)
            throw new RuntimeException("Too few frequency peaks");
        ArrayList<ShazamHash> hashes = new ArrayList<>();
        for (int i = 0; i < strong_freqs.size() - 2; ++i) {
            for (int k = 0; k < interval_num; ++k) {
                for (int j = 1; j <= 2; ++j) {
                    for (int kk = 1; kk < interval_num; ++kk) {
                        ShazamHash hash = new ShazamHash(
                                strong_freqs.get(i)[k],
                                strong_freqs.get(i+j)[kk],
                                j, i, id
                        );
                        hashes.add(hash);
                    }
                }
            }
        }
        return hashes;
    }
}
