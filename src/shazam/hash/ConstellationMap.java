package shazam.hash;

import java.util.ArrayList;

/**
 * Created by Wen Ke on 2016/10/20.
 * Generating a constellation map for each audio.
 */
public class ConstellationMap {

    public static final double scaling = FFT.WINDOW_SIZE/44100;

    public static final int interval_num = 4;

    public static final int start_freq = 55; // The frequency of tone A1

    private static final int[][] freqRanges = new int[interval_num][2];

    static {
        for (int i=0; i<interval_num; ++i) {
            freqRanges[i][0] = (int) Math.round((start_freq<<i)*scaling);
            freqRanges[i][1] = (int) Math.round((start_freq<<(i+1))*scaling);
        }
    }

    private ArrayList<int[]> data = new ArrayList<>();

    /**
     * Append a column of frequency peaks to the constellation map.
     * A frequency peak is a frequency value whose amplitude is the highest among
     * all frequencies in a frequency interval.
     *
     * @param freqDomain The frequency domain data generated by FFT.
     */
    public void append(double[] freqDomain) {
        int[] freqPeaks = new int[interval_num];

        // The maximum amplitude and its frequency
        double max;
        int max_freq;

        // find the peak frequency in each interval
        for (int i=0; i<interval_num; ++i) {
            max = 0;
            max_freq = freqRanges[i][0];
            for (int j = freqRanges[i][0]; j<freqRanges[i][1]; ++j) {
                if (freqDomain[j]>max) {
                    max = freqDomain[j];
                    max_freq = j;
                }
            }
            freqPeaks[i] = max_freq;
        }
        data.add(freqPeaks);
    }

    /**
     * Generate fingerprints.
     * For each frequency peak, generate 8 fingerprints with its 8 successors.
     *
     * @return
     */
    public ArrayList<ShazamHash> shazamHash() {
        if (data.size()<3)
            throw new RuntimeException("Too few frequency peaks");
        ArrayList<ShazamHash> hashes = new ArrayList<>();
        for (int i=0; i<data.size()-2; ++i) {
            for (int k = 0; k<interval_num; ++k) {
                for (int j=1; j<=2; ++j) {
                    for (int kk=1; kk<interval_num; ++kk) {
                        ShazamHash hash = new ShazamHash();
                        hash.f1 = (short) data.get(i)[k];
                        hash.f2 = (short) data.get(i+j)[kk];
                        hash.dt = (short) j;
                        hash.offset = i;
                        hashes.add(hash);
                    }
                }
            }
        }
        return hashes;
    }
}
